{"ast":null,"code":"import{useState}from'react';import'./App.css';import Box from'./components/Box';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const choice={rock:{name:'Rock',img:'https://opengameart.org/sites/default/files/forum-attachments/very%20simple%20rock_0.png'},scissors:{name:'Scissors',img:'http://www.pngmart.com/files/1/Scissors-PNG-Pic.png'},paper:{name:'Paper',img:'https://www.collinsdictionary.com/images/full/paper_111691001.jpg'}};function App(){const[userSelect,setUserSelect]=useState(null);const[computerSelelct,setComputerSelelct]=useState(null);const[result,setResult]=useState({userResult:'',computerResult:''});const play=userChoice=>{setUserSelect(choice[userChoice]);let computerChoice=randomChoice();setComputerSelelct(computerChoice);const userResult=judgement(choice[userChoice],computerChoice);const computerResult=userResult==='Win'?'Lose':userResult==='Lose'?'Win':'Tie';setResult({userResult:userResult,computerResult:computerResult});};const judgement=(user,computer)=>{if(user.name===computer.name)return'Tie';else if(user.name==='Rock')return computer.name==='Scissors'?'Win':'Lose';else if(user.name==='Scissors')return computer.name==='Paper'?'Win':'Lose';else if(user.name==='Paper')return computer.name==='Rock'?'Win':'Lose';};const randomChoice=()=>{// 객체의 키값만 뽑아서 배열로 만들어주는 함수\nlet itemArray=Object.keys(choice);let randomItem=Math.floor(Math.random()*itemArray.length);let final=itemArray[randomItem];return choice[final];};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"main\",children:[/*#__PURE__*/_jsx(Box,{title:\"you\",item:userSelect,result:result.userResult}),/*#__PURE__*/_jsx(Box,{title:\"computer\",item:computerSelelct,result:result.computerResult})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"main\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>play('scissors'),children:\"\\u270C\\uFE0F\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>play('rock'),children:\"\\u270A\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>play('paper'),children:\"\\u270B\"})]})]});}export default App;// 챌린지\n// 승패 결과 보여주기\n// 승패 UI 구분하기 (이기면 초록색, 지면 빨간색 테두리)","map":{"version":3,"names":["useState","Box","jsx","_jsx","jsxs","_jsxs","choice","rock","name","img","scissors","paper","App","userSelect","setUserSelect","computerSelelct","setComputerSelelct","result","setResult","userResult","computerResult","play","userChoice","computerChoice","randomChoice","judgement","user","computer","itemArray","Object","keys","randomItem","Math","floor","random","length","final","children","className","title","item","onClick"],"sources":["/Users/eunseonpark/programming/react-study/rockpaperscissor/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport Box from './components/Box';\n\nconst choice = {\n  rock: {\n    name: 'Rock',\n    img: 'https://opengameart.org/sites/default/files/forum-attachments/very%20simple%20rock_0.png',\n  },\n  scissors: {\n    name: 'Scissors',\n    img: 'http://www.pngmart.com/files/1/Scissors-PNG-Pic.png',\n  },\n  paper: {\n    name: 'Paper',\n    img: 'https://www.collinsdictionary.com/images/full/paper_111691001.jpg',\n  },\n};\n\nfunction App() {\n  const [userSelect, setUserSelect] = useState(null);\n  const [computerSelelct, setComputerSelelct] = useState(null);\n  const [result, setResult] = useState({ userResult: '', computerResult: '' });\n  const play = (userChoice) => {\n    setUserSelect(choice[userChoice]);\n    let computerChoice = randomChoice();\n    setComputerSelelct(computerChoice);\n    const userResult = judgement(choice[userChoice], computerChoice);\n    const computerResult =\n      userResult === 'Win' ? 'Lose' : userResult === 'Lose' ? 'Win' : 'Tie';\n    setResult({ userResult: userResult, computerResult: computerResult });\n  };\n  const judgement = (user, computer) => {\n    if (user.name === computer.name) return 'Tie';\n    else if (user.name === 'Rock')\n      return computer.name === 'Scissors' ? 'Win' : 'Lose';\n    else if (user.name === 'Scissors')\n      return computer.name === 'Paper' ? 'Win' : 'Lose';\n    else if (user.name === 'Paper')\n      return computer.name === 'Rock' ? 'Win' : 'Lose';\n  };\n  const randomChoice = () => {\n    // 객체의 키값만 뽑아서 배열로 만들어주는 함수\n    let itemArray = Object.keys(choice);\n    let randomItem = Math.floor(Math.random() * itemArray.length);\n    let final = itemArray[randomItem];\n    return choice[final];\n  };\n  return (\n    <div>\n      <div className='main'>\n        <Box title='you' item={userSelect} result={result.userResult} />\n        <Box\n          title='computer'\n          item={computerSelelct}\n          result={result.computerResult}\n        />\n      </div>\n      <div className='main'>\n        <button onClick={() => play('scissors')}>✌️</button>\n        <button onClick={() => play('rock')}>✊</button>\n        <button onClick={() => play('paper')}>✋</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// 챌린지\n// 승패 결과 보여주기\n// 승패 UI 구분하기 (이기면 초록색, 지면 빨간색 테두리)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}